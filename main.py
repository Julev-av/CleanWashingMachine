from flask import Flask
from threading import Thread
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from datetime import datetime
import os

# Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è uptime
app = Flask('')

@app.route('/')
def home():
    return "–Ø –∂–∏–≤!"

def run():
    app.run(host='0.0.0.0', port=8080)

def keep_alive():
    t = Thread(target=run)
    t.start()

def main_menu_keyboard():
    keyboard = [
        ["1 —Å—Ç–∏—Ä–∞–ª–∫–∞", "2 —Å—Ç–∏—Ä–∞–ª–∫–∞"],
        ["3 —Å—Ç–∏—Ä–∞–ª–∫–∞", "4 —Å—Ç–∏—Ä–∞–ª–∫–∞"],
        ["–°–æ–æ–±—â–∏—Ç—å –æ –≤–æ–Ω—é—á–∫–µ"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def smelly_menu_keyboard():
    keyboard = [
        ["–°—Ç–∏—Ä–∞–ª–∫–∞ 1 –≤–æ–Ω—è–µ—Ç", "–°—Ç–∏—Ä–∞–ª–∫–∞ 2 –≤–æ–Ω—è–µ—Ç"],
        ["–°—Ç–∏—Ä–∞–ª–∫–∞ 3 –≤–æ–Ω—è–µ—Ç", "–°—Ç–∏—Ä–∞–ª–∫–∞ 4 –≤–æ–Ω—è—é—Ç"],
        ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_keyboard())

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    time_now = datetime.now().strftime("%H:%M")

    valid_options = [
        "1 —Å—Ç–∏—Ä–∞–ª–∫–∞", "2 —Å—Ç–∏—Ä–∞–ª–∫–∞", "3 —Å—Ç–∏—Ä–∞–ª–∫–∞", "4 —Å—Ç–∏—Ä–∞–ª–∫–∞",
        "–°–æ–æ–±—â–∏—Ç—å –æ –≤–æ–Ω—é—á–∫–µ",
        "–°—Ç–∏—Ä–∞–ª–∫–∞ 1 –≤–æ–Ω—è–µ—Ç", "–°—Ç–∏—Ä–∞–ª–∫–∞ 2 –≤–æ–Ω—è–µ—Ç",
        "–°—Ç–∏—Ä–∞–ª–∫–∞ 3 –≤–æ–Ω—è–µ—Ç", "–°—Ç–∏—Ä–∞–ª–∫–∞ 4 –≤–æ–Ω—è—é—Ç",
        "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
    ]

    if text not in valid_options:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    if text in ["1 —Å—Ç–∏—Ä–∞–ª–∫–∞", "2 —Å—Ç–∏—Ä–∞–ª–∫–∞", "3 —Å—Ç–∏—Ä–∞–ª–∫–∞", "4 —Å—Ç–∏—Ä–∞–ª–∫–∞"]:
        number = text[0]
        await update.message.reply_text(f"üïí {time_now} ‚Äî –°—Ç–∏—Ä–∞–ª–∫–∞ {number} —Å–≤–æ–±–æ–¥–Ω–∞", reply_markup=main_menu_keyboard())

    elif text == "–°–æ–æ–±—â–∏—Ç—å –æ –≤–æ–Ω—é—á–∫–µ":
        await update.message.reply_text("–ö–∞–∫–∞—è —Å—Ç–∏—Ä–∞–ª–∫–∞ –≤–æ–Ω—è–µ—Ç?", reply_markup=smelly_menu_keyboard())

    elif text in ["–°—Ç–∏—Ä–∞–ª–∫–∞ 1 –≤–æ–Ω—è–µ—Ç", "–°—Ç–∏—Ä–∞–ª–∫–∞ 2 –≤–æ–Ω—è–µ—Ç", "–°—Ç–∏—Ä–∞–ª–∫–∞ 3 –≤–æ–Ω—è–µ—Ç", "–°—Ç–∏—Ä–∞–ª–∫–∞ 4 –≤–æ–Ω—è—é—Ç"]:
        number = text[9]
        await update.message.reply_text(f"‚ö†Ô∏è –°—Ç–∏—Ä–∞–ª–∫–∞ {number} –≤–æ–Ω—è–µ—Ç! –°—Ä–æ—á–Ω–æ –ø—Ä–æ–≤–µ—Ç—Ä–∏—Ç—å!", reply_markup=main_menu_keyboard())

    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())

def main():
    keep_alive()  # –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –∞–ø—Ç–∞–π–º–∞
    TOKEN = os.environ['TOKEN']
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == '__main__':
    main()
